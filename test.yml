AWSTemplateFormatVersion: 2022-06-10
Description: test-template
Parameters:
  DomainName:
    Type: String
    Description: The DNS name of an existing Amazon Route 53 hosted zone
  BucketName:
    Type: String
    Description: Amazon S3 files bucket name
  HostedZoneId:
    Type: String
    Description: Amazon Route53 Hosted Zone Id for DomainName
  CertificateArn:
    Type: String
    Description: Certificate Link




Resources:
  # ============= bucket create =========================================
  S3bucket: 
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: private
      BucketName: !Ref BucketName
# ============= dns reacord add =========================================
  myDNS:
  Type: 'AWS::Route53::RecordSetGroup'
  Properties:
    HostedZoneId: !Ref HostedZoneId
    RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          HostedZoneId: !Ref HostedZoneId
          DNSName: !GetAtt 
            - myDistribution
            - DomainName
 #========= create identity ==================================== 
  identity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "its me"
  
 
  # myDNSRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: !Ref HostedZoneId
  #     Name: !Ref DomainName
  #     Type: A
  #     TTL: '300'
  #     ResourceRecords: !
  #      - !GetAtt S3bucket.DomainName    
# ============= create cloudfront =========================================
  myDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt S3bucket.RegionalDomainName
          Id: !Ref BucketName
          S3OriginConfig:
            OriginAccessIdentity: "origin-access-identity/cloudfront/!Ref identity"
        Enabled: 'true'
        Comment: terraform is better
        
        Aliases: !GetAtt 
            - myDistribution
            - DomainName
        
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
         
          TargetOriginId: !Ref BucketName
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
    #      TrustedSigners:
          
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_200
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - AQ
            - CV
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'false'
          SslSupportMethod: sni-only
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1
  #========= s3 policy ===============================
  SampleBucketPolicy:
     Type: AWS::S3::BucketPolicy
     Properties:
        Bucket: !Ref BucketName
        PolicyDocument:
          Version: 2022-06-10
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref BucketName
                  - /*
              Principal: 
                 AWS: !Join
                    - ''
                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'
                      - !Ref identity
                 
              # Condition:
              #   StringLike:
              #     'aws:Referer':
              #       - 'http://www.example.com/*'
              #       - 'http://example.net/*'




Outputs:
  CloudFrontID: !Ref myDistribution
  
            




